package utilities;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;

import org.apache.commons.io.FileUtils;

import net.masterthought.cucumber.Configuration;
import net.masterthought.cucumber.ReportBuilder;
import net.masterthought.cucumber.presentation.PresentationMode;
import net.masterthought.cucumber.sorting.SortingMethod;

/**
 * {@link CucumberReport} class holds method to generate cucumber report using
 * the JSON files generated by the test runner classes.
 */
public final class CucumberReport {

	private static final String PROJECT_BUILD_DIRECTORY = System.getProperty("user.dir").concat("/target");
	private static final String JSON_FILES_DIRECTORY = PROJECT_BUILD_DIRECTORY.concat("/reports/cucumber-json-reports");
	private static final String REPORT_OUTPUT_DIRECTORY = PROJECT_BUILD_DIRECTORY.concat("/reports");

	private CucumberReport() {
	}

	/**
	 * Method to generate cucumber report after the test run.
	 * 
	 * @param jsonFilesDirectory:    directory in which JSON report files are
	 *                               present.
	 * @param reportOutputDirectory: directory where the cucumber HTML report is
	 *                               generated.
	 * @param projectName:           name of the project
	 * @param metadata:              metadata that will be displayed at the main
	 *                               page of the report.
	 */
	public static void generateReport(final String jsonFilesDirectory, final String reportOutputDirectory,
			final String projectName, final Map<String, String> metadata) {
		/*
		 * Finds JSON files within the jsonFilesDirectory directory and its
		 * sub-directories.
		 */
		final Collection<File> jsonFiles = FileUtils.listFiles(new File(jsonFilesDirectory), new String[] { "json" },
				true);
		final List<String> jsonFilePaths = new ArrayList<>(jsonFiles.size());
		for (final File jsonFile : jsonFiles)
			jsonFilePaths.add(jsonFile.getAbsolutePath());
		final Configuration configuration = new Configuration(new File(reportOutputDirectory), projectName);
		configuration.addPresentationModes(PresentationMode.EXPAND_ALL_STEPS);
		configuration.setSortingMethod(SortingMethod.NATURAL);
		if (metadata != null) {
			for (final String classificationName : metadata.keySet())
				configuration.addClassifications(classificationName, metadata.get(classificationName));
		}
		new ReportBuilder(jsonFilePaths, configuration).generateReports();
	}

	/**
	 * Method to generate cucumber report after test run using default JSON files
	 * directory and report output directory.
	 * 
	 * @param projectName: name of the project
	 * @param metadata:    metadata that will be displayed at the main page of the
	 *                     report.
	 */
	public static void generateReport(final String projectName, final Map<String, String> metadata) {
		generateReport(JSON_FILES_DIRECTORY, REPORT_OUTPUT_DIRECTORY, projectName, metadata);
	}

	/**
	 * Method to generate cucumber report after test run using default JSON files
	 * directory and report output directory with no metadata.
	 * 
	 * @param projectName: name of the project
	 */
	public static void generateReport(final String projectName) {
		generateReport(projectName, null);
	}
}
